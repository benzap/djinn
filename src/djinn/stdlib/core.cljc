(ns djinn.stdlib.core
  (:require
   [djinn.std.state-machine :as state]))


(defn import-stdlib-core
  [sm]
  (-> sm

      ;; clojure.core functions [a-z]
      (state/set-global-var '+ +)
      (state/set-global-var '- -)
      (state/set-global-var '/ /)
      (state/set-global-var '< <)
      (state/set-global-var '<= <=)
      (state/set-global-var '= =)
      (state/set-global-var '== ==)
      (state/set-global-var '> >)
      (state/set-global-var '>= >=)
      ;;(state/set-global-var 'add-watch add-watch)
      ;;(state/set-global-var 'agent agent)
      ;;(state/set-global-var 'agent-error agent-error)
      ;;(state/set-global-var 'alter alter)
      
      ;;(state/set-global-var 'and and) ;; macro fixme
      (state/set-global-var 'any? any?)
      (state/set-global-var 'apply apply)
      ;;(state/set-global-var 'assert) ;; macro fixme
      (state/set-global-var 'assoc assoc)
      (state/set-global-var 'assoc-in assoc-in)
      (state/set-global-var 'associative? associative?)
      (state/set-global-var 'atom atom)
      ;;(state/set-global-var 'await await)
      ;;(state/set-global-var 'await-for await-for)
      (state/set-global-var 'bigdec bigdec)
      (state/set-global-var 'bigint bigint)
      (state/set-global-var 'biginteger biginteger)
      (state/set-global-var 'bit-and bit-and)
      (state/set-global-var 'bit-and-not bit-and-not)
      (state/set-global-var 'bit-clear bit-clear)
      (state/set-global-var 'bit-flip bit-flip)
      (state/set-global-var 'bit-not bit-not)
      (state/set-global-var 'bit-or bit-or)
      (state/set-global-var 'bit-set bit-set)
      (state/set-global-var 'bit-shift-left bit-shift-left)
      (state/set-global-var 'bit-shift-right bit-shift-right)
      (state/set-global-var 'bit-test bit-test)
      (state/set-global-var 'bit-xor bit-xor)
      (state/set-global-var 'boolean boolean)
      (state/set-global-var 'boolean? boolean?)
      (state/set-global-var 'butlast butlast)
      (state/set-global-var 'byte)
      (state/set-global-var 'coll? coll?)
      ;;(state/set-global-var 'comment comemnt) ;; macro fixme
      (state/set-global-var 'comp comp)
      (state/set-global-var 'comparator comparator)
      (state/set-global-var 'compare compare)
      (state/set-global-var 'compare-and-set! compare-and-set!)
      (state/set-global-var 'complement complement)
      (state/set-global-var 'concat concat)
      ;;(state/set-global-var 'cond cond) ;; macro fixme
      (state/set-global-var 'conj conj)
      (state/set-global-var 'cons cons)
      (state/set-global-var 'constantly constantly)
      (state/set-global-var 'contains? contains?)
      (state/set-global-var 'count count)
      (state/set-global-var 'counted? counted?)
      (state/set-global-var 'cycle cycle)
      (state/set-global-var 'dec dec)
      (state/set-global-var 'decimal? decimal?)
      ;; FIXME: declare
      (state/set-global-var 'dedupe dedupe)
      (state/set-global-var 'denominator denominator)
      (state/set-global-var 'deref deref)
      (state/set-global-var 'disj disj)
      (state/set-global-var 'dissoc dissoc)
      (state/set-global-var 'distinct distinct)
      ;; FIXME: do
      (state/set-global-var 'doall doall)
      (state/set-global-var 'dorun dorun)
      ;;(state/set-global-var 'dotimes dotimes)
      (state/set-global-var 'drop drop)
      (state/set-global-var 'drop-last drop-last)
      (state/set-global-var 'drop-while drop-while)
      ;; FIXME: doseq, dotimes, doto
      (state/set-global-var 'empty empty)
      (state/set-global-var 'empty? empty?)
      ;; FIXME: eval
      (state/set-global-var 'even? even?)
      (state/set-global-var 'every-pred every-pred)
      (state/set-global-var 'every? every?)
      (state/set-global-var 'false? false?)
      (state/set-global-var 'ffirst ffirst)
      (state/set-global-var 'filter filter)
      (state/set-global-var 'filterv filterv)
      (state/set-global-var 'find find)
      (state/set-global-var 'find-keyword find-keyword)
      (state/set-global-var 'first first)
      (state/set-global-var 'flatten flatten)
      (state/set-global-var 'float float)
      (state/set-global-var 'float? float?)
      ;; (state/set-global-var 'fn? fn?)
      (state/set-global-var 'fnext fnext)
      (state/set-global-var 'fnil fnil)
      ;; (state/set-global-var 'for for)
      (state/set-global-var 'format format)
      (state/set-global-var 'gensym gensym)
      (state/set-global-var 'get get)
      (state/set-global-var 'get-in get-in)
      (state/set-global-var 'group-by group-by)
      (state/set-global-var 'ident? ident?)
      (state/set-global-var 'identical? identical?)
      (state/set-global-var 'identity identity)
      ;; (state/set-global-var 'if if)
      ;; if-let, if-not, if-some, ifn?
      (state/set-global-var 'inc inc)
      (state/set-global-var 'indexed? indexed?)
      (state/set-global-var 'inst? inst?)
      (state/set-global-var 'int int)
      (state/set-global-var 'int? int?)
      (state/set-global-var 'integer? integer?)
      (state/set-global-var 'interleave interleave)
      (state/set-global-var 'interpose interpose)
      (state/set-global-var 'into into)
      (state/set-global-var 'iterate iterate)
      (state/set-global-var 'juxt juxt)
      (state/set-global-var 'keep keep)
      (state/set-global-var 'keep-indexed keep-indexed)
      (state/set-global-var 'key key)
      (state/set-global-var 'keys keys)
      (state/set-global-var 'keyword keyword)
      (state/set-global-var 'keyword? keyword?)
      (state/set-global-var 'last last)
      (state/set-global-var 'list list)
      (state/set-global-var 'list? list?)
      ;; loop, macroexpand
      (state/set-global-var 'map map)
      (state/set-global-var 'map-entry? map-entry?)
      (state/set-global-var 'map-indexed map-indexed)
      (state/set-global-var 'map? map?)
      (state/set-global-var 'mapcat mapcat)
      (state/set-global-var 'mapv mapv)
      (state/set-global-var 'max max)
      (state/set-global-var 'max-key max-key)
      (state/set-global-var 'memoize memoize)
      (state/set-global-var 'merge merge)
      (state/set-global-var 'merge-with merge-with)
      (state/set-global-var 'meta meta)
      (state/set-global-var 'min min)
      (state/set-global-var 'min-key min-key)
      (state/set-global-var 'mod mod)
      (state/set-global-var 'name name)
      (state/set-global-var 'nat-int? nat-int?)
      (state/set-global-var 'neg-int? neg-int?)
      (state/set-global-var 'neg? neg?)
      (state/set-global-var 'newline newline)
      (state/set-global-var 'next next)
      (state/set-global-var 'nfirst nfirst)
      (state/set-global-var 'nil? nil?)
      (state/set-global-var 'nnext nnext)
      (state/set-global-var 'not not)
      (state/set-global-var 'not-any? not-any?)
      (state/set-global-var 'not-empty not-empty)
      (state/set-global-var 'not-every? not-every?)
      (state/set-global-var 'not= not=)
      (state/set-global-var 'nth nth)
      (state/set-global-var 'nthnext nthnext)
      (state/set-global-var 'nthrest nthrest)
      (state/set-global-var 'num num)
      (state/set-global-var 'number? number?)
      (state/set-global-var 'numerator numerator)
      (state/set-global-var 'odd? odd?)
      ;;(state/set-global-var 'or or) FIXME macro
      (state/set-global-var 'partial partial)
      (state/set-global-var 'partition partition)
      (state/set-global-var 'partition-all partition-all)
      (state/set-global-var 'partition-by)
      (state/set-global-var 'peek peek)
      (state/set-global-var 'pop pop)
      (state/set-global-var 'pos-int? pos-int?)
      (state/set-global-var 'pos? pos?)
      (state/set-global-var 'pr pr)
      (state/set-global-var 'pr-str pr-str)
      (state/set-global-var 'print print)
      (state/set-global-var 'print-str print-str)
      (state/set-global-var 'printf printf)
      (state/set-global-var 'println println)
      (state/set-global-var 'println-str println-str)
      (state/set-global-var 'prn prn)
      (state/set-global-var 'prn-str prn-str)
      (state/set-global-var 'qualified-ident? qualified-ident?)
      (state/set-global-var 'qualified-keyword? qualified-keyword?)
      (state/set-global-var 'qualified-symbol? qualified-symbol?)
      (state/set-global-var 'quot quot)))
      


   
      
